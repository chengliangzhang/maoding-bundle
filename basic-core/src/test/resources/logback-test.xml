<?xml version="1.0" encoding="UTF-8"?>
<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 动态日志级别 -->
	<jmxConfigurator/>

	<!-- 定义日志文件 输出位置 -->
	<property name="log_dir" value="target/logs"/>

	<!-- 日志最大的历史 -->
	<property name="maxHistory" value="60"/>

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
				<expression>return message.contains("getLocalFileByNode");</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
				<expression>return logger.contains("DiskFileServer");</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMatch>DENY</onMatch>
		</filter>
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
				<expression>return logger.contains("StorageServiceImpl");</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMatch>DENY</onMatch>
		</filter>
		<!--<filter class="ch.qos.logback.core.filter.EvaluatorFilter">-->
			<!--<evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">-->
				<!--<expression>return logger.contains("dao.Storage");</expression>-->
			<!--</evaluator>-->
			<!--<onMatch>ACCEPT</onMatch>-->
			<!--<onMatch>DENY</onMatch>-->
		<!--</filter>-->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
				<expression>return logger.contains("coreUtils");</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMatch>DENY</onMatch>
		</filter>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %-5level [%10thread] %-30logger: %msg%n</pattern>
		</encoder>
	</appender>

	<!-- ERROR_ONLY级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ABOVE_LEVEL" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<!-- 设置过滤级别 -->
			<level>WARN</level>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}_error.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss} %-5level [%10thread] %-30logger: %msg%n</pattern>
		</encoder>
	</appender>

	<!-- DEBUG+级别日志 appender -->
	<appender name="ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}_debug.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %-5level [%10thread] %-30logger: %msg%n</pattern>
		</encoder>
	</appender>

	<!-- INFO+级别日志 appender -->
	<appender name="INFO_ONLY" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}_info.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss} %-5level [%10thread] %-30logger: %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 开发环境 -->
	<logger name="com.maoding" level="DEBUG" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="ALL"/>
        <appender-ref ref="INFO_ONLY"/>
        <appender-ref ref="ABOVE_LEVEL"/>
    </logger>

	<!-- 不要提交此文件！！！调整环境一般不用改变此处，相应注释屏蔽掉上面其中一种就好 -->
	<root level="WARN">
		<appender-ref ref="console"/>
		<appender-ref ref="ABOVE_LEVEL"/>
	</root>
</configuration>
